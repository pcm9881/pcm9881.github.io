<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PCM9881 Blog on PCM9881</title><link>https://pcm9881.github.io/ko/</link><description>Recent content in PCM9881 Blog on PCM9881</description><generator>Hugo -- gohugo.io</generator><language>ko</language><copyright>&amp;copy; Copyright 2023 pcm9881</copyright><lastBuildDate>Thu, 15 Feb 2024 19:29:10 +0900</lastBuildDate><atom:link href="https://pcm9881.github.io/ko/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Batch JobExecutionAlreadyRunningException 해결방안</title><link>https://pcm9881.github.io/ko/posts/spring-batch-jobexecutionalreadyrunningexception/</link><pubDate>Thu, 15 Feb 2024 19:29:10 +0900</pubDate><guid>https://pcm9881.github.io/ko/posts/spring-batch-jobexecutionalreadyrunningexception/</guid><description>Spring Batch JobExecutionAlreadyRunningException: A job execution for this job is already running 내용 Spring Batch가 예기치 못한 상황으로 인해 비정상 종료된 경우에 실행할 때 이미 job이 실행중일 때 발생하는 Exception입니다.
해결방안 콘솔에서 JobInstance ID 확인 A job execution for this job is already running: JobInstance: id={JobInstance ID}, version=0, Job=[{Job Name}] BATCH_JOB_EXECUTION 테이블 status(상태), exit_code(종료코드) 수정 UPDATE batch_job_execution SET end_time = now(), status = &amp;#39;COMPLETED&amp;#39;, exit_code = &amp;#39;FAILED&amp;#39; WHERE job_execution_id = {JobInstance ID} (SELECT MAX(job_execution_id) FROM batch_job_execution WHERE job_execution_id = {JobInstance ID} ); 참조 https://stackoverflow.</description></item><item><title>파비콘 만들기</title><link>https://pcm9881.github.io/ko/posts/generate-favicon/</link><pubDate>Tue, 23 Jan 2024 15:28:47 +0900</pubDate><guid>https://pcm9881.github.io/ko/posts/generate-favicon/</guid><description>파비콘 만들기 파비콘(favicon)이란 파비콘(Favicon)이란 웹사이트 또는 웹 페이지를 대표하기 위해 웹 브라우저에서 사용되는 16x16 픽셀의 작은 이미지입니다. 즐겨찾기 아이콘(favorite icon)의 줄임말
참조 https://ko.wix.com/blog/post/what-is-favicon-how-to-make</description></item><item><title>Spring Boot Junit5 Test Order</title><link>https://pcm9881.github.io/ko/posts/spring-boot-junit5-test-order/</link><pubDate>Mon, 11 Dec 2023 11:12:56 +0900</pubDate><guid>https://pcm9881.github.io/ko/posts/spring-boot-junit5-test-order/</guid><description>JUnit 순서 JUnit에서 별도로 순서를 지정안하는 @TestMethodOrder를 사용하지 않으면 어떤식으로 동작하는지 설명하는 글입니다.
요구사항 Spring Boot JUnit 5 메소드명 뒤에 숫자가 붙은 경우 동일한 메소드명 길이로 뒤에 숫자가 붙은 경우 숫자 순서대로 진행됩니다.
코드 import org.junit.jupiter.api.*; public class AnnotationTest { @Test void test1() { System.out.println(&amp;#34;first&amp;#34;); } @Test void test2() { System.out.println(&amp;#34;second&amp;#34;); } @Test void test3() { System.out.println(&amp;#34;third&amp;#34;); } @Disabled void test4() { System.out.println(&amp;#34;fourth&amp;#34;); } } 결과 first second third fourth 메소드명 뒤에 알파벳이 붙은 경우 동일한 메소드명 길이로 뒤에 알파벳이 붙은 경우 알파벳 순서대로 진행됩니다.</description></item><item><title>Spring Boot Jpa Test Project 생성</title><link>https://pcm9881.github.io/ko/posts/spring-boot-jpa-test-project-chapter-01/</link><pubDate>Wed, 06 Dec 2023 10:05:33 +0900</pubDate><guid>https://pcm9881.github.io/ko/posts/spring-boot-jpa-test-project-chapter-01/</guid><description>Spring Boot JPA Test Project 생성 JPA 관련 테스트를 진행하기 위해 프로젝트를 만드는 내용을 정리했습니다.
OpenJDK 17 설치 작성자는 MacOS를 사용중입니다. brew를 활용해서 설치하겠습니다.
Brew Install OpenJDK 17 brew install openjdk@17 시스템 등록 (심볼릭 링크) sudo ln -sfn /usr/local/opt/openjdk@17/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-17.jdk 테스트 데이터베이스 생성 이해를 돕기 위해 내용을 작성했지만 데이터베이스명과 테이블명 또는 유저명, 유저비밀번호는 직접 다르게 설정하셔도 무관합니다. 자세한 설명을 보고 싶으면 PostgreSQL 데이터베이스 생성에서 참조하시면 됩니다.
데이터베이스 생성 create database jpa_db; 유저 생성 create user jpa_user with encrypted password &amp;#39;jpa_password&amp;#39;; 데이터베이스 유저 전체권한 설정 grant all privileges on database jpa_db to jpa_user; Spring Boot 3.</description></item><item><title>바닐라 자바스크립트로 Document ready 구현하기</title><link>https://pcm9881.github.io/ko/posts/vanilla-javascript-document-ready/</link><pubDate>Sun, 03 Dec 2023 12:57:17 +0900</pubDate><guid>https://pcm9881.github.io/ko/posts/vanilla-javascript-document-ready/</guid><description>DOMContentLoaded DOMContentLoaded 이벤트는 HTML 문서가 완전히 구문 분석되고 모든 지연된 스크립트가 다운로드되고 실행 될 때 발생합니다.
document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, () =&amp;gt; { console.log(&amp;#34;문서 콘텐츠가 로드되었습니다.&amp;#34;); }); load load 이벤트는 스타일시트, 스크립트, iframe 및 이미지와 같은 모든 종속 리소스를 포함하여 전체 페이지가 로드되면 이벤트가 시작됩니다.
window.addEventListerner(&amp;#34;load&amp;#34;, () =&amp;gt; { console.log(&amp;#34;문서 전체 리소스가 로드되었습니다.&amp;#34;); }); window.onload vs window.addEventListener(&amp;rsquo;load') 기능적으로는 큰 차이 없습니다. 2번 이상의 호출을 할때 window.onload는 재정의를 하기 때문에 2번 이상의 호출을 할 때 window.</description></item><item><title>Developer Check Skill</title><link>https://pcm9881.github.io/ko/posts/developer-check-skill/</link><pubDate>Fri, 01 Dec 2023 17:28:48 +0900</pubDate><guid>https://pcm9881.github.io/ko/posts/developer-check-skill/</guid><description>aaaaaa
https://github.com/EBvi/dev-matrix/tree/master</description></item><item><title>About</title><link>https://pcm9881.github.io/ko/about/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://pcm9881.github.io/ko/about/</guid><description>소개 안녕하세요 웹 개발자입니다.
기술스택 WEB CSS 프로그래밍 언어 Java Javascript Golang Python Databases UI Tools Static Site Generators</description></item><item><title>Categories</title><link>https://pcm9881.github.io/ko/categories/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://pcm9881.github.io/ko/categories/</guid><description/></item><item><title>Tags</title><link>https://pcm9881.github.io/ko/tags/</link><pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate><guid>https://pcm9881.github.io/ko/tags/</guid><description/></item></channel></rss>